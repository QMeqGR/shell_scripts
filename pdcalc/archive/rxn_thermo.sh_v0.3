#!/bin/sh

# Use: This script is to be run in the octave_work directory
#      of a pdcalc calculation tree

#################################################
# Editable things
#################################################
# 

script_name="rxn_enthalpy.sh";
script_version="0.3"
version=$script_version
ver_date="Aug 2015"

# version 0.3, 28 Aug 2015
#  -- remove code redundancy 
# version 0.2, August 2015
#  -- added gas entropy term
#  -- calculate dH correctly by finding dG=0 and
#     then correcting dH with Cp integral from equil T
#
# version 0.1, March 2014

#################################################
# No need to edit below this line
#################################################

######################################
# defaults
help=0;
datafile="data.dat"; 
dbg=0;
JMK_to_EVAK="1.0364e-5";
LHS="";
LHStoten=0;
PR_Pa="101325"; # pressure in Pa
RHS="";
RHStoten=0;
Tref="300"; # temperature of stationary point for G
T=$Tref;    # desired temperature default in K


######################################
declare SWITCH
while getopts "dhL:P:r:R:T:" SWITCH; do
    case $SWITCH in
    d) dbg=1 ;;
    h) help=1 ;;
    L) LHS=$OPTARG ;;
    P) PR_Pa=$OPTARG ;;
    r) Tref=$OPTARG ;;
    R) RHS=$OPTARG ;;
    T) T=$OPTARG ;;
    esac
done



if [ $# -eq 0 ] || [ $help -eq 1 ]; then
    echo
    echo "#######################"
    echo "#  "$script_name
    echo "#######################"
    echo
    echo "Version "$version
    echo $ver_date
    echo
    echo "use: "$script_name" -L \"1 CaH2\" -R \"1 Ca 1 hydrogen\"  [dhL:P:r:R:T:w:]"
    echo "     Script is to be run in the octave_work directory"
    echo "     of a pdcalc calculation"
    echo 
    echo
    echo "    -h --- show this help"
    echo "    -d --- debug (default is OFF)"
    echo
    echo "         ** EQUATION INPUT **"
    echo "            example: 1 CaH2 --> 1 Ca 1 hydrogen"
    echo "            note: no '+' sign"
    echo "            coefficients must be given, even if '1'"
    echo
    echo "    -L -*- LHS of rxn eqn"
    echo "           e.g. -L \"2 CaH2\""
    echo "    -R -*- RHS of rxn eqn"
    echo "           e.g. -R \"2 Ca 2 H2\""
    echo
    echo "    -P -*- pressure in Pa (default $PR_Pa)"
    echo "    -T -*- temperature in K (def "$T")"
    echo "    -r -*- Tref temp (stationary dG, default $Tref)"
    echo
    echo
    echo Eric Majzoub
    echo University of Missouri - St. Louis
    echo August 2015
    echo
    exit
fi


###################################################
###################################################
TMP_FILES="tmp.sgas.awk tmp.cvint.awk";


###################################################
# AWK FILES
###################################################

make_cvint_awkfile(){

cat > tmp.cvint.awk <<EOF
BEGIN{
# Set on command line
# Ti, Tf, the starting and ending temperatures
# DT, the temperature step. Get this by a simple pass through the 
#     Cv file. (cat file | gawk '(NR==1){t0=$1}(NR==2){t1=$1}END{print t1-t0;}'

#
# The input columns will be T, Fvib(T), Svib(T), Cv(T)
#
    intcvdt=0;
    if ( Ti < Tf ) { Tlo=Ti; Thi=Tf; }
    if ( Ti > Tf ) { Tlo=Tf; Thi=Ti; }
}

( Tlo < \$1 && \$1 < Thi ){
    Cv=\$4;
    intcvdt += DT*Cv;
}

END{
   if ( Ti < Tf ) printf("%.4e",intcvdt);
   if ( Ti > Tf ) printf("%.4e",-intcvdt);
}

EOF

}

make_sgas_awkfile(){

cat > tmp.sgas.awk <<EOF

BEGIN{
  # constants
k_B = 1.38e-23; # in joules/K
eVtoJ = 1.602e-19;
Avogadro=6.022e23
PI=3.14159265358979;
AMU=1.66053892e-27;
hbar=1.05457173e-34;
JMK_to_EVAK=1.0364e-5;
Rgas_pre=8.3144621; # J /(mol K)


  nq = ( (m*AMU*k_B*TT) / ( 2*PI*(hbar^2) ) )^(3/2);
  sgas = (Rgas_pre)* ( 7/2 + log( nq/2 ) + log( k_B*TT / PP ) );

  temp = - (Rgas_pre*TT) * ( log( nq/2 ) + log( k_B*TT / PP ) + 2 ); 
  fgas = temp * JMK_to_EVAK;

  printf("m= %f   TT= %f\n",m,TT);
  printf("nq= %e\n",nq);
  printf("sgas[eV/fuK]= %f\n",sgas*JMK_to_EVAK);
  printf("fgas= %f\n",fgas);
  printf("TS= %f\n",TT*sgas);
}

EOF
    
}

###################################################
# FUNCTIONS
###################################################
function calc_thermo (){
    declare -a phaselist=("${!1}")
    declare -a coefflist=("${!2}")
    coeffarr=($coefflist)
    
#    echo "phaselist= "$phaselist
#    echo "coefflist= "$coefflist
    
    gawk --source 'BEGIN{printf("%-15s %6s%12s%12s%12s%12s%12s%8s\n",\
"phase","coef","E0","Fvib","Svib","Sgas","Cvint","isgas");}'

count=0; en=0; toten=0; totent=0; totenth=0; Cv_enth=0; gasent=0; cvint=0;
for phase in $phaselist; do
    coeff=${coeffarr[$count]};
    count=$((count+1));

    isgas=$(cat $datafile | gawk --source '($1==PHS && NF>3){print $3}' -v PHS="$phase");    
    molwt=$(cat $datafile | gawk --source '($1==PHS && NF>3){print $2}' -v PHS="$phase");
    static=$(cat $datafile | gawk --source '($1==PHS){print $5}' -v PHS="$phase");
    dynamic=$(cat $phase.dat | gawk --source '($1==TEMP){print $2}' -v TEMP="$Tref");
    entropy=$(cat $phase.dat | gawk --source '($1==TEMP){print $3}' -v TEMP="$Tref");
    en=$(echo $static $dynamic | gawk '{print $1+$2}');

    if [ $isgas -eq 1 ]; then
	gasent=$(gawk -f ./tmp.sgas.awk -v m=$molwt -v TT=$Tref -v PP=$PR_Pa | grep sgas | gawk '{print $2}')
    else
	gasent=0;
    fi

    if [ "$Tref" != "$T" ]; then
	dT=$(cat $phase.dat | gawk --source '(NR==1){T0=$1}(NR==2){T1=$1}END{printf("%d",T1-T0);}')
	cvint=$(cat $phase.dat | gawk -f ./tmp.cvint.awk -v DT=$dT -v Ti=$Tref -v Tf=$T);
    else
	cvint=0;
    fi

    toten=$(echo $coeff $en $toten | gawk '{print $1*$2+$3}');
    totent=$(echo $coeff $entropy $gasent $totent | gawk '{print $1*($2+$3)+$4}');
    totenth=$(echo $coeff $entropy $gasent $totenth | gawk --source '{print $1*($2+$3)*TEMP+$4}' -v TEMP="$Tref" );
    Cv_enth=$(echo $coeff $cvint $Cv_enth | gawk --source '{print $1*$2+$3}');

    echo $phase $coeff $static $dynamic $entropy $gasent $cvint $isgas \
	| gawk '{printf("%-15.15s %6.3f%12.3e%12.3e%12.3e%12.3e%12.3e%8d\n",$1,$2,$3,$4,$5,$6,$7,$8);}';
done

}


###################################################
# START HERE
###################################################

echo "###################################################################"
echo "# "$script_name "     version "$script_version
echo "# date of script call: "`date`
echo "###################################################################"

lhscount=$(echo $LHS | gawk --source '(NF>0){ if (NF%2!=0){print -1}else{print NF} }');
rhscount=$(echo $RHS | gawk --source '(NF>0){ if (NF%2!=0){print -1}else{print NF} }');

if [ $dbg -eq 1 ]; then
    echo "lhscount= "$lhscount
    echo "rhscount= "$rhscount
fi

if [ $lhscount -eq -1 ] || [ $rhscount -eq -1 ]; then
    echo "Check equation input. Exiting."
    exit;
fi

# make the awkfile(s)
make_sgas_awkfile
if [ "$Tref" != "$T" ]; then
    if [ $dbg -eq 1 ]; then
	echo "making awkfile for Cv integration"
	echo "Using Tref= "$Tref "   T(desired)= "$T
    fi
    make_cvint_awkfile
fi

lhs_phaselist=$(echo $LHS | gawk --source '(NF>0){for(i=2;i<NF+1;i=i+2){printf("%s ",$i);}}');
lhs_coefflist=$(echo $LHS | gawk --source '(NF>0){for(i=1;i<NF+1;i=i+2){printf("%s ",$i);}}');
rhs_phaselist=$(echo $RHS | gawk --source '(NF>0){for(i=2;i<NF+1;i=i+2){printf("%s ",$i);}}');
rhs_coefflist=$(echo $RHS | gawk --source '(NF>0){for(i=1;i<NF+1;i=i+2){printf("%s ",$i);}}');
if [ $dbg -eq 1 ]; then
    echo "lhs_phaselist= "$lhs_phaselist;
    echo "rhs_phaselist= "$rhs_phaselist;
    echo "lhs_coefflist= "$lhs_coefflist;
    echo "rhs_coefflist= "$rhs_coefflist;
fi

for phase in $lhs_phaselist $rhs_phaselist; do
    if [ ! -e $phase.dat ]; then
	echo "Can't find phase "$phase " Exiting."
	exit;
    fi
done

# make an array containing both the coeffs and the phases
lhscoeffarr=($lhs_coefflist);
rhscoeffarr=($rhs_coefflist);

############################################################

echo "------------------------------------------ LHS -------------------------------------------"
calc_thermo lhs_phaselist lhs_coefflist
LHStoten=$toten; LHStotent=$totent; LHStotenth=$totenth; LHS_Cv_enth=$Cv_enth;
echo "------------------------------------------ RHS -------------------------------------------"
calc_thermo rhs_phaselist rhs_coefflist
RHStoten=$toten; RHStotent=$totent; RHStotenth=$totenth; RHS_Cv_enth=$Cv_enth;
echo "------------------------------------------------------------------------------------------"

#############################################################
echo


if [ $dbg -eq 1 ]; then
    echo
    printf "%10s%10.5e\t%10s%10.5e\t%10s%10.5e\n" "LHStoten= " $LHStoten "LHStotent= " $LHStotent "LHStotenth= " $LHStotenth
    printf "%10s%10.5e\t%10s%10.5e\t%10s%10.5e\n" "RHStoten= " $RHStoten "RHStotent= " $RHStotent "RHStotenth= " $RHStotenth
    echo
fi

echo "Data at Tref= "$Tref "K"
# calculate the dE value
if [ $dbg -eq 1 ]; then
    dE_eV=$(echo $LHStoten $RHStoten | gawk '{printf("%12.6f\n",($2-$1));}');
    printf "%-4s%11.6f%s\n" "dE=" $dE_eV " [eV rxn]"
fi
dE=$(echo $LHStoten $RHStoten | gawk '{printf("%12.6f\n",($2-$1)*96.48306883);}');
printf "%-4s%11.6f%s\n" "dE=" $dE " [kJ/mol rxn]"

# calculate the dS value
dS=$(echo $LHStotent $RHStotent $JMK_to_EVAK | gawk '{printf("%12.6f\n",($2-$1)/$3);}');
printf "%-4s%11.6f%s\n" "dS=" $dS " [ J/mol K rxn]"

# calculate the dH value
dH=$(echo $LHStotenth $RHStotenth | gawk '{printf("%12.6f\n",($2-$1)*96.48306883);}');
printf "%-4s%11.6f%s\n" "dH=" $dH " [kJ/mol rxn]"

# calculate the dF value
dF=$(echo $dE $Tref $dS | gawk '{printf("%12.6f\n",($1-$2*$3/1000));}');
printf "%-4s%11.6f%s\n" "dF=" $dF " [kJ/mol rxn] ( dF = dE - T dS )"


echo
echo "Corrections to dH from Cv with T= "$Tref " --->  T= "$T
# calculate correction to the dH value
dH_Cv=0;
dH_Cv=$(echo $LHS_Cv_enth $RHS_Cv_enth | gawk '{printf("%12.6f\n",($2-$1)*96.48306883);}');
dH_corrected=$(echo $dH $dH_Cv | gawk '{printf("%12.6f\n",($1+$2));}')
printf "%12s  %12s\n" "LHS_Cv_enth" "RHS_Cv_enth"
printf "%+12.6f %+12.6f    %s\n" $LHS_Cv_enth  $RHS_Cv_enth  " [eV/f.u.]"
echo
echo "_____________________________"
printf "%8s%-5s  %12s\n" " " "[K]" "[kJ/mol rxn]"
printf "%-8s%-5d%12.6f\n" "dH" $Tref $dH
printf "%-8s%-5s%12.6f\n" "dH_Cv" " " $dH_Cv
printf "%-8s%-5d%12.6f\n" "dH" $T $dH_corrected
echo "-----------------------------"


# calculate TdS (not at Tref!!, so the rxn_thermo script can find dG=0)
TdS=$(echo $T $dS | gawk '{printf("%12.6f",$1*$2/1000);}')
#echo "TdS = "$TdS
echo
echo "Pressure= "$PR_Pa " Pa"
echo
echo " "$LHS " ---> " $RHS
echo
echo "units:  (dH,dE,TdS) [kJ/mol rxn]     (dS) [J/mol K rxn]      [K]"
echo "dH= "$dH "    dE= "$dE "    dS= "$dS "    T= "$T "  TdS= "$TdS

# clean up
rm -f $TMP_FILES
exit
